/**
 * Sample JavaScript delegate script containing stubs and documentation for all
 * available delegate methods. See the user manual for more information.
 *
 * The application will create an instance of this function early in the request
 * cycle and dispose of it at the end of the request cycle.
 *
 * This version of the script works with Cantaloupe version 5, and not earlier
 * versions.
 */
function CustomDelegate() {

    const self = this;

    /**
     * Attribute for the request context, which is an object containing
     * information about the current request.
     *
     * This variable will be set by the server before any methods are called.
     * Methods can access its keys like:
     *
     * ```
     * identifier = self.context.identifier;
     * ```
     *
     * The hash will contain the following keys in response to all requests:
     *
     * `client_ip`        {string} Client IP address.
     * `cookies`          {Hash<string,string>} Hash of cookie name-value pairs.
     * `identifier`       {string} Image identifier.
     * `request_headers`  {Object<string,string>} Hash of header name-value
     *                    pairs.
     * `request_uri`      {string} URI requested by the client.
     * `local_uri`        {string} URI seen by the application, which may be
     *                    different from `request_uri` when operating behind a
     *                    reverse-proxy server.
     * `scale_constraint` {Array<number>} Two-element array with scale
     *                    constraint numerator at position 0 and denominator at
     *                    position 1.
     *
     * It will contain the following additional string keys in response to
     * image requests:
     *
     * `full_size`      {Object<string,number>} Hash with `width` and `height`
     *                  keys corresponding to the pixel dimensions of the
     *                  source image.
     * `metadata`       {Hash<String,Object>} Embedded image metadata. Object
     *                  structure varies depending on the source image.
     *                  See the `metadata()` method.
     * `operations`     {Array<Object<string,Object>>} Array of operations in
     *                  order of application. Only operations that are not
     *                  no-ops will be included. Every hash contains a `class`
     *                  key corresponding to the operation class name, which
     *                  will be one of the `e.i.l.c.operation.Operation`
     *                  implementations.
     * `output_format`  {String} Output format media (MIME) type.
     * `resulting_size` {Object<string,number>} Hash with `width` and `height`
     *                  keys corresponding to the pixel dimensions of the
     *                  resulting image after all operations have been applied.
     */
    this.context = null;

    /**
     * Returns authorization status for the current request. Called upon all
     * requests to all public endpoints.
     *
     * Implementations should assume that the underlying resource is available,
     * and not try to check for it.
     *
     * Possible return values:
     *
     * 1. Boolean true/false, indicating whether the request is fully authorized
     *    or not. If false, the client will receive a 403 Forbidden response.
     * 2. Hash with a `status_code` key.
     *     a. If it corresponds to an integer from 200-299, the request is
     *        authorized.
     *     b. If it corresponds to an integer from 300-399:
     *         i. If the hash also contains a `location` key corresponding to a
     *            URI string, the request will be redirected to that URI using
     *            that code.
     *         ii. If the hash also contains `scale_numerator` and
     *            `scale_denominator` keys, the request will be
     *            redirected using that code to a virtual reduced-scale version
     *            of the source image.
     *     c. If it corresponds to 401, the hash must include a `challenge` key
     *        corresponding to a WWW-Authenticate header value.
     *
     * @param options {Object} Empty object.
     * @return {boolean,Object<string,Object>} See above.
     */
    this.authorize = function(options = {}) {
        return true;
    };

    /**
     * Used to add additional keys to an information JSON response. See the
     * [Image API specification](http://iiif.io/api/image/2.1/#image-information).
     *
     * @param options {Object} Empty object.
     * @return {Object} Object that will be merged into an IIIF Image API
     *                  information response. Return an empty object to add
     *                  nothing.
     */
    this.extra_iiif_information_response_keys = function(options = {}) {
        /* Example:
        return {
            "attribution": "Copyright My Great Organization. All rights reserved.",
            "license": "http://example.org/license.html",
            "service": {
                "@context": "http://iiif.io/api/annex/services/physdim/1/context.json",
                "profile": "http://iiif.io/api/annex/services/physdim",
                "physicalScale": 0.0025,
                "physicalUnits": "in"
            }
        }
        */
        return {};
    };

    /**
     * Tells the server which source to use for the given identifier.
     *
     * @param options {Object} Empty object.
     * @return {string} Source name.
     */
    this.source = function(options = {}) {
    };

    /**
     * N.B.: this method should not try to perform authorization. `authorize()`
     * should be used instead.
     *
     * @param options {Object} Empty object.
     * @return {string,null} Blob key of the image corresponding to the given
     *                      identifier, or null if not found.
     */
    this.azurestoragesource_blob_key = function(options = {}) {
    };

    /**
     * N.B.: this method should not try to perform authorization. `authorize()`
     * should be used instead.
     *
     * @param options [Object] Empty object.
     * @return {string,null} Absolute pathname of the image corresponding to the
     *                      given identifier, or null if not found.
     */
    this.filesystemsource_pathname = function(options = {}) {
    };

    /**
     * Returns one of the following:
     *
     * 1. String URI
     * 2. Object with the following keys:
     *      * `uri` {string} (required)
     *      * `username` {string} For HTTP Basic authentication (optional).
     *      * `secret` {string} For HTTP Basic authentication (optional).
     *      * `headers` {Object<String,String>} Object of request headers
     *        (optional).
     * 3. null if not found.
     *
     * N.B.: this method should not try to perform authorization. {@link
     * #authorize} should be used instead.
     *
     * @param options {Object} Empty object.
     * @return See above.
     */
    this.httpsource_resource_info = function(options = {}) {
    };

    /**
     * N.B.: this method should not try to perform authorization. {@link
     * #authorize} should be used instead.
     *
     * @param options {Object} Empty object.
     * @return {string} Identifier of the image corresponding to the given
     *                  identifier in the database.
     */
    this.jdbcsource_database_identifier = function(options = {}) {
    };

    /**
     * Returns either the media (MIME) type of an image, or an SQL statement
     * that can be used to retrieve it, if it is stored in the database. In the
     * latter case, the `SELECT` and `FROM` clauses should be in uppercase in
     * order to be autodetected. If null is returned, the media type will be
     * inferred some other way, such as by identifier extension or magic bytes.
     *
     * @param options {Object} Empty object.
     * @return {string, null}
     */
    this.jdbcsource_media_type = function(options = {}) {
    };

    /**
     * @param options {Object} Empty object.
     * @return {string} SQL statement that selects the BLOB corresponding to
     *                  the value returned by {@link
     *                  #jdbcsource_database_identifier}.
     */
    this.jdbcsource_lookup_sql = function(options = {}) {
    };

    /**
     * N.B.: this method should not try to perform authorization. {@link
     * #authorize} should be used instead.
     *
     * @param options {Object} Empty object.
     * @return {Object<string,Object>,null} Object containing `bucket` and
     *                                      `key` keys; or null if not found.
     */
    this.s3source_object_info = function(options = {}) {
    };

    /**
     * Tells the server what overlay, if any, to apply to an image in response
     * to a request. Will be called upon all image requests to any endpoint if
     * overlays are enabled and the overlay strategy is set to `ScriptStrategy`
     * in the application configuration.
     *
     * N.B.: When a string overlay is too large or long to fit entirely within
     * the image, it won't be drawn. Consider breaking long strings with LFs
     * (`\n`).
     *
     * @param options {Object} Empty object.
     * @return {Object<string,string>,null} For image overlays, an object with
     *         `image`, `position`, and `inset` keys. For string overlays, an
     *         object with `background_color`, `color`, `font`,
     *         `font_min_size`, `font_size`, `font_weight`, `glyph_spacing`,
     *         `inset`, `position`, `string`, `stroke_color`, and
     *         `stroke_width` keys. Return null for no overlay.
     */
    this.overlay = function(options = {}) {
    };

    /**
     * Tells the server what regions of an image to redact in response to a
     * particular request. Will be called upon all image requests to any
     * endpoint if redactions are enabled in the application configuration.
     *
     * @param options {Object} Empty object.
     * @return {Array<Object<string,number>>} Array of objects, each with `x`,
     *         `y`, `width`, and `height` keys; or an empty array if no
     *         redactions are to be applied.
     */
    this.redactions = function(options = {}) {
        return [];
    };

    /**
     * Returns XMP metadata to embed in the derivative image.
     *
     * Source image metadata is available in the `metadata` context key, and
     * has the following structure:
     *
     * {
     *     "exif": {
     *         "tagSet": "Baseline TIFF",
     *         "fields": {
     *             "Field1Name": value,
     *             "Field2Name": value,
     *             "EXIFIFD": {
     *                 "tagSet": "EXIF",
     *                 "fields": {
     *                     "Field1Name": value,
     *                     "Field2Name": value
     *                 }
     *             }
     *         }
     *     },
     *     "iptc": [
     *         "Field1Name": value,
     *         "Field2Name": value
     *     ],
     *     "xmp_string": "<rdf:RDF>...</rdf:RDF>",
     *     "xmp_model": https://jena.apache.org/documentation/javadoc/jena/org/apache/jena/rdf/model/Model.html
     *     "native": {
     *         # structure varies
     *     }
     * }
     *
     * * The `exif` key refers to embedded EXIF data. This also includes IFD0
     *   metadata from source TIFFs, whether or not an EXIF IFD is present.
     * * The `iptc` key refers to embedded IPTC IIM data.
     * * The `xmp_string` key refers to raw embedded XMP data, which may or may
     *   not contain EXIF and/or IPTC information.
     * * The `xmp_model` key contains a Jena Model object pre-loaded with the
     *   contents of `xmp_string`.
     * * The `native` key refers to format-specific metadata.
     *
     * Any combination of the above keys may be present or missing depending on
     * what is available in a particular source image.
     *
     * Only XMP can be embedded in derivative images. See the user manual for
     * examples of working with the XMP model programmatically.
     *
     * @return {string,Model,null} String or Jena model containing XMP data to
     *                             embed in the derivative image, or null to
     *                             not embed anything.
     */
    this.metadata = function(options = {}) {
    };

}
